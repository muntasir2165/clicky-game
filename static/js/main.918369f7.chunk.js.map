{"version":3,"sources":["ImageFileNames.js","components/Navbar/Navbar.js","components/Banner/Banner.js","components/ImageBlock/ImageBlock.js","components/ImageBlockListing/ImageBlockListing.js","components/Footer/Footer.js","App.js","index.js"],"names":["ImageFileNames","Navbar","props","react_default","a","createElement","className","href","id","gameStatus","feedback","score","topScore","Banner","ImageBlock","src","process","imageFileName","alt","height","imageBlockHeight","width","imageBlockWidth","onClick","clickHandler","ImageBlockListing","imageFileNames","map","index","components_ImageBlock_ImageBlock","key","Footer","target","rel","App","state","clickedImages","handleClick","event","clickedImageFileName","_this","imageClickedBefore","setState","shuffle","newScore","length","clickedImagesCopy","slice","push","newTopScore","array","temporaryValue","randomIndex","currentIndex","Math","floor","random","this","console","log","components_Navbar_Navbar","components_Banner_Banner","components_ImageBlockListing_ImageBlockListing","components_Footer_Footer","Component","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.918369f7.chunk.js","sourcesContent":["let ImageFileNames = [\"alchemist.png\", \"ant.png\", \"bart.png\", \"bee.png\", \"boy.png\", \"girl.png\", \"homer.png\", \"lisa.png\", \"man.png\", \"panther.png\", \"plane.png\", \"pony.png\", \"robot.png\", \"sunshine.png\", \"pilot.png\", \"yoga.png\"];\n\nexport default ImageFileNames;","import React from \"react\";\nimport \"./Navbar.css\";\n\nconst Navbar = props => (\n    <div className=\"bg-dark navbar-dark container-fluid text-center pt-1 pb-1\">\n      <div className=\"row\">\n        <div className=\"col-md-4\">\n          <h2><a href=\".\" className=\"text-white nounderline\" id=\"app-name\">Clicky Game</a></h2>\n        </div>\n        <div className={\"col-md-4 \" + (props.gameStatus == \"2\" ? \" text-danger\" : (props.gameStatus == \"1\" ? \" text-success\" : \" text-info\"))}>\n          <h3>{props.feedback}</h3>\n        </div>\n        <div className=\"col-md-4 text-muted\">\n          <h3>Score: {props.score} | Top Score: {props.topScore}</h3>\n        </div>\n      </div>\n    </div>\n);\n\nexport default Navbar;\n","import React from \"react\";\nimport \"./Banner.css\";\n\nconst Banner = () => (\n  <div className=\"jumbotron jumbotron-fluid text-center\">\n    <div className=\"container\">\n      <div className=\"row\">\n        <div className=\"col-md-8 offset-md-2 offset-md-right-2\">\n          <h1>Clicky Game!</h1>\n          <h4>Click on an image to earn points, but don't click on any more than once!</h4>\n        </div>\n    </div>\n    </div>\n  </div>\n);\n\nexport default Banner;\n","import React from \"react\";\nimport \"./ImageBlock.css\";\n\nconst ImageBlock = (props) => (\n  <img className={\"col-md-3 col-sm-4 col-xs-12 pb-4 imageBlock rounded-circle \" + (props.gameStatus == \"2\" ? \" gameLost\" : (props.gameStatus == \"1\" ? \" gameWon\" : \"\"))} src={process.env.PUBLIC_URL + \"/images/\" + props.imageFileName} alt={props.alt} height={props.imageBlockHeight} width={props.imageBlockWidth} onClick={props.clickHandler} />\n);\n\nexport default ImageBlock;","import React from \"react\";\nimport \"./ImageBlockListing.css\";\nimport ImageBlock from \"../ImageBlock\";\n\nconst ImageBlockListing = (props) => (\n\t<div className=\"container\">\n\t\t<div className=\"row\">\n\t    {props.imageFileNames.map((imageFileName, index) => {\n\t      return <ImageBlock key={index} imageFileName={imageFileName} alt={imageFileName} clickHandler={props.clickHandler} gameStatus={props.gameStatus} />\n\t    })}\n\t  </div>\n  </div>\n);\n\nexport default ImageBlockListing;","import React from \"react\";\nimport \"./Footer.css\";\n\nconst Footer = () => (\n  <footer className=\"footer text-center\">\n    <span>Clicky Game Â© 2018 Copyright:&nbsp;<a href=\"https://github.com/muntasir2165\" target=\"_blank\" rel=\"noopener noreferrer\">Muntasir Biojid</a></span>\n  </footer>\n);\n\nexport default Footer;\n","import React, { Component } from \"react\";\nimport ImageFileNames from \"./ImageFileNames\";\nimport Navbar from \"./components/Navbar\";\nimport Banner from \"./components/Banner\";\nimport ImageBlockListing from \"./components/ImageBlockListing\";\nimport Footer from \"./components/Footer\";\n\n\nclass App extends Component {\n\tstate = {\n    imageFileNames: ImageFileNames,\n    clickedImages: [],\n    score: 0,\n    topScore: 0,\n    feedback: \"Click an image to begin!\",\n    gameStatus: 0 //gameStatus: 0 => game in progresss, 1 => game won, 2 => game lost\n  };\n\n  componentDidMount() {\n    this.setState({\n      imageFileNames: this.shuffle(this.state.imageFileNames)\n    }, () => {\n      console.log(\"Shuffled the images on game start\");\n    });\n  }\n\n  handleClick = event => {\n    // console.log(event.target); // example output => <img class=\"col-md-3 col-sm-4 col-xs-12 pb-4 imageBlock\" src=\"/static/media/alchemist.ce4808c0.png\" alt=\"alchemist.png\">\n    // console.log(event.target.alt); // example output => alchemist.png\n    const clickedImageFileName = event.target.alt;\n    // console.log(\"The clicked image is: \" + clickedImageFileName);\n    // console.log(\"state BEFORE: \" + JSON.stringify(this.state));\n    const wasImageClickedBefore = this.imageClickedBefore(clickedImageFileName);\n    if (wasImageClickedBefore) {\n      this.setState({\n        imageFileNames: this.shuffle(this.state.imageFileNames),\n        // imageFileNames: this.state.imageFileNames, //for debugging only\n        clickedImages: [],\n        score: 0,\n        feedback: \"Game Over! You Guessed The Same Image Twice!\",\n        gameStatus: 2\n      }, () => {\n        // console.log(\"IF block state AFTER GAME OVER: \" + JSON.stringify(this.state));\n      });\n    } else {\n      let newScore = this.state.score + 1;\n      if (newScore === this.state.imageFileNames.length) {\n        this.setState({\n        imageFileNames: this.shuffle(this.state.imageFileNames),\n        // imageFileNames: this.state.imageFileNames, //for debugging only\n          clickedImages: [],\n          score: 0,\n          topScore: newScore,\n          feedback: \"Congrats! You Have Guessed All Of The Images Correctly!\",\n          gameStatus: 1\n          });\n      } else {\n        const clickedImagesCopy = this.state.clickedImages.slice();\n        clickedImagesCopy.push(clickedImageFileName);\n        const newTopScore = (newScore > this.state.topScore) ? newScore : this.state.topScore;\n        this.setState({\n        imageFileNames: this.shuffle(this.state.imageFileNames),\n        // imageFileNames: this.state.imageFileNames, //for debugging only\n          clickedImages: clickedImagesCopy,\n          score: newScore,\n          topScore: newTopScore,\n          feedback: \"Yes! You Guessed The Image Correctly!\",\n          gameStatus: 0\n          }, () => {\n          // console.log(\"IF block state AFTER CORRECT GUESS: \" + JSON.stringify(this.state));\n        });\n      }\n    }\n  };\n\n  imageClickedBefore = (clickedImageFileName) => {\n  \tfor (let index=0; index<this.state.clickedImages.length; index++) {\n  \t\tif (this.state.clickedImages[index] === clickedImageFileName) {\n        return true;\n      }\n    }\n    return false;\n  };\n\n  // Fisher-Yates (aka Knuth) Shuffle algorithm implementation to shuffle images to display in the UI\n  // Copied from stackoverflow post:\n  // https://stackoverflow.com/questions/2450954/how-to-randomize-shuffle-a-javascript-array\n  shuffle = (array) => {\n    var currentIndex = array.length, temporaryValue, randomIndex;\n    // While there remain elements to shuffle...\n    while (0 !== currentIndex) {\n      // Pick a remaining element...\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1;\n      // And swap it with the current element.\n      temporaryValue = array[currentIndex];\n      array[currentIndex] = array[randomIndex];\n      array[randomIndex] = temporaryValue;\n    }\n    return array;\n  };\n\n  render() {\n   return (\n    <div>\n      <Navbar score={this.state.score} topScore={this.state.topScore} feedback={this.state.feedback} gameStatus={this.state.gameStatus} />\n      <Banner />\n      <ImageBlockListing imageFileNames={this.state.imageFileNames} clickHandler={this.handleClick} gameStatus={this.state.gameStatus} />\n      <Footer />\n    </div>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}